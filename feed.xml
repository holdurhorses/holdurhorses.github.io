<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://holdurhorses.github.io/</id><title>zhang</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-12-19T23:38:30+08:00</updated> <author> <name>zh</name> <uri>https://holdurhorses.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://holdurhorses.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://holdurhorses.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 zh </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>kaldi vs wenet：online流程设计对照</title><link href="https://holdurhorses.github.io/posts/kaldi-vs-wenet-online%E6%B5%81%E7%A8%8B%E8%AE%BE%E8%AE%A1%E5%AF%B9%E7%85%A7/" rel="alternate" type="text/html" title="kaldi vs wenet：online流程设计对照" /><published>2021-12-19T21:10:00+08:00</published> <updated>2021-12-19T23:38:10+08:00</updated> <id>https://holdurhorses.github.io/posts/kaldi-vs-wenet-online%E6%B5%81%E7%A8%8B%E8%AE%BE%E8%AE%A1%E5%AF%B9%E7%85%A7/</id> <content src="https://holdurhorses.github.io/posts/kaldi-vs-wenet-online%E6%B5%81%E7%A8%8B%E8%AE%BE%E8%AE%A1%E5%AF%B9%E7%85%A7/" /> <author> <name>Zhang</name> </author> <category term="ASR" /> <summary> 　　ASR online实现是工程实现必不可少的一环，可以随着用户实时语音流的输入及时返回识别结果，对于用户体验感非常重要。kaldi/wenet都支持全流程的online实现，主要包括online feature extractor、online model inference、online decoding。由于wenet借鉴了kaldi的不少实现思路和代码，所以本文以kaldi为主介绍online实现的整体思路，并在差异化环节分别介绍kaldi和wenet的实现和简单原理，本文还是遵循kaldi的初衷使用“online”(而非“流式”或者“实时”)作为一种谨慎描述。 Take care 完成一个Online系统，要妥善处理几方面： processing level：一般有三个level，分别为frame-level，chunk-level，utterence-lev... </summary> </entry> <entry><title>HMM几个应用场景：NLP、TTS、ASR[TODO]</title><link href="https://holdurhorses.github.io/posts/HMM%E5%87%A0%E4%B8%AA%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-NLP-TTS-ASR-TODO/" rel="alternate" type="text/html" title="HMM几个应用场景：NLP、TTS、ASR[TODO]" /><published>2021-12-18T21:10:00+08:00</published> <updated>2021-12-18T21:10:00+08:00</updated> <id>https://holdurhorses.github.io/posts/HMM%E5%87%A0%E4%B8%AA%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-NLP-TTS-ASR-TODO/</id> <content src="https://holdurhorses.github.io/posts/HMM%E5%87%A0%E4%B8%AA%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-NLP-TTS-ASR-TODO/" /> <author> <name>Zhang</name> </author> <category term="MachineLearning" /> <summary> 　　 </summary> </entry> <entry><title>DNN-based SPSS全流程算法原理：Merlin[TODO]</title><link href="https://holdurhorses.github.io/posts/DNN-based-SPSS%E5%85%A8%E6%B5%81%E7%A8%8B%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86-Merlin-TODO/" rel="alternate" type="text/html" title="DNN-based SPSS全流程算法原理：Merlin[TODO]" /><published>2021-12-18T21:10:00+08:00</published> <updated>2021-12-18T21:10:00+08:00</updated> <id>https://holdurhorses.github.io/posts/DNN-based-SPSS%E5%85%A8%E6%B5%81%E7%A8%8B%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86-Merlin-TODO/</id> <content src="https://holdurhorses.github.io/posts/DNN-based-SPSS%E5%85%A8%E6%B5%81%E7%A8%8B%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86-Merlin-TODO/" /> <author> <name>Zhang</name> </author> <category term="TTS" /> <summary> 　　 </summary> </entry> <entry><title>语音合成不同时期的技术特点和核心原理</title><link href="https://holdurhorses.github.io/posts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E4%B8%8D%E5%90%8C%E6%97%B6%E6%9C%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E7%89%B9%E7%82%B9%E5%92%8C%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/" rel="alternate" type="text/html" title="语音合成不同时期的技术特点和核心原理" /><published>2021-12-04T21:10:00+08:00</published> <updated>2021-12-04T21:10:00+08:00</updated> <id>https://holdurhorses.github.io/posts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E4%B8%8D%E5%90%8C%E6%97%B6%E6%9C%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E7%89%B9%E7%82%B9%E5%92%8C%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</id> <content src="https://holdurhorses.github.io/posts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E4%B8%8D%E5%90%8C%E6%97%B6%E6%9C%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E7%89%B9%E7%82%B9%E5%92%8C%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/" /> <author> <name>Zhang</name> </author> <category term="TTS" /> <category term="review" /> <summary> 　　TTS(Text-to-Speech)本质上是解决输入文本到输入语音的不定长映射问题。和ASR具有很大的相似性，但是又具有one-to-many技术特点而带来诸多难点。各位前辈的技术博客和各类论文都会对TTS技术原理和特点都有专业、详尽的描述，但是想起刚入门时面对众多技术路线，又不知从何下手的困境，觉得还是有必要沉淀一篇带有核心原理的方向性综合论述博文。本文给出不同时期TTS技术的基本特点，同时对核心技术原理进行阐释。 技术分类 TTS技术大类上基本划分一致，但是在技术子类上尤其涉及End-to-end speech synthesis上，可能有多种划分方法，如： 根据端对端任务覆盖程度：部分功能模块变成端对端任务和全部功能模块变成了端对端任务 根据模型特点：自回归和非自回归模型 本文采用自回归和非自回归模型两类介绍曾经的热门模型tacotron1/2和fas... </summary> </entry> <entry><title>pitch提取技术路线及在ASR、TTS、变声算法中的应用[TODO]</title><link href="https://holdurhorses.github.io/posts/pitch%E6%8F%90%E5%8F%96%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF%E5%8F%8A%E5%9C%A8ASR-TTS-%E5%8F%98%E5%A3%B0%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8-TODO/" rel="alternate" type="text/html" title="pitch提取技术路线及在ASR、TTS、变声算法中的应用[TODO]" /><published>2021-12-04T21:10:00+08:00</published> <updated>2021-12-04T21:10:00+08:00</updated> <id>https://holdurhorses.github.io/posts/pitch%E6%8F%90%E5%8F%96%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF%E5%8F%8A%E5%9C%A8ASR-TTS-%E5%8F%98%E5%A3%B0%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8-TODO/</id> <content src="https://holdurhorses.github.io/posts/pitch%E6%8F%90%E5%8F%96%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF%E5%8F%8A%E5%9C%A8ASR-TTS-%E5%8F%98%E5%A3%B0%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8-TODO/" /> <author> <name>Zhang</name> </author> <category term="Feature" /> <summary> 　　 Parallel text-to-speech with pitch prediction pitch在tts中的应用 </summary> </entry> </feed>
